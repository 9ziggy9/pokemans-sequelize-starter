* Pokemans
** Dependencies
#+BEGIN_SRC console
sequelize, sequelize-cli, dotenv, dotenv-cli, sqlite3, express, nodemon
#+END_SRC
** Set up express
Create app.js and instantiate express. Give it a port to listen to.
** Create .env
Add DB_FILE, and add PORT
** Config -- add .sequelizerc and database.js
**** .sequelizerc
Shows where DB paths exist. Boiler plate:
#+BEGIN_SRC js
  const path = require("path");

  module.exports = {
    config: path.resolve("config", "database.js"),
    "models-path": path.resolve("db", "models"),
    "seeders-path": path.resolve("db", "seeders"),
    "migrations-path": path.resolve("db", "migrations"),
  };
#+END_SRC
**** config/database.js
Boiler plate code for SQLite application:
#+BEGIN_SRC js
module.exports = {
  development: {
    storage: process.env.DB_FILE,
    dialect: "sqlite",
    seederStorage: "sequelize",
    benchmark: true,
    logQueryParameters: true,
    typeValidation: true,
  },
};
#+END_SRC
** Initialize sequelize
#+BEGIN_SRC console
npx dotenv sequelize init
#+END_SRC
** Migrations
* Cheat sheet
** Command Line
*** Init project
#+BEGIN_SRC console
npx sequelize-cli init
#+END_SRC

*** Create database
#+BEGIN_SRC console
npx sequelize-cli db:create
#+END_SRC

*** Generate model and its migration
#+BEGIN_SRC console
npx sequelize-cli model:generate --name <ModelName> --attributes <column1>:
<type>,<column2>:<type>,...
#+END_SRC

*** Run pending migrations
#+BEGIN_SRC console
npx sequelize-cli db:migrate
#+END_SRC

*** Rollback one migration
#+BEGIN_SRC console
npx sequelize-cli db:migrate:undo
#+END_SRC

*** Rollback all migrations
#+BEGIN_SRC console
npx sequelize-cli db:migrate:undo:all 
#+END_SRC

*** Generate a new seed file
#+BEGIN_SRC console
npx sequelize-cli seed:generate --name <descriptiveName>
#+END_SRC

*** Run all pending seeds
#+BEGIN_SRC console
npx sequelize-cli db:seed:all
#+END_SRC

*** Rollback one seed
#+BEGIN_SRC console
npx sequelize-cli db:seed:undo
#+END_SRC

*** Rollback all seeds
#+BEGIN_SRC console
npx sequelize-cli db:seed:undo:all
#+END_SRC
** Migrations
*** Create Table (usually used in the up() method)
#+BEGIN_SRC js
  // This uses the short form for references
  return queryInterface.createTable(<TableName>, { 
      <columnName>: { 
          type: Sequelize.<type>, 
          allowNull: <true|false>, 
          unique: <true|false>, 
          references: { model: <TableName> }, // This is the plural table 
  name 
                                              // that the column references. 
      } 
  }); 
 
  // This the longer form for references that is less confusing 
  return queryInterface.createTable(<TableName>, { 
      <columnName>: { 
          type: Sequelize.<type>, 
          allowNull: <true|false>, 
          unique: <true|false>, 
          references: { 
              model: { 
                  tableName: <TableName> // This is the plural table name 
              } 
        }
  }
});
#+END_SRC

*** Delete Table (usually used in down() function)
#+BEGIN_SRC js
return queryInterface.dropTable(<TableName>);
#+END_SRC

*** Adding a column
#+BEGIN_SRC js
return queryInteface.addColumn(<TableName>, <columnName>: { 
    type: Sequelize.<type>, 
    allowNull: <true|false>, 
    unique: <true|false>, 
    references: { model: <TableName> }, // This is the plural table name 
                                        // that the column references. 
});
#+END_SRC

*** Removing a column
#+BEGIN_SRC js
return queryInterface.removeColumn(<TableName>, <columnName>);
#+END_SRC

** Model Associations
*** One to One between Student and Scholarship
> student.js
#+BEGIN_SRC js
 Student.hasOne(models.Scholarship, { foreignKey: 'studentId' });
#+END_SRC
> scholarship.js
#+BEGIN_SRC js
 Scholarship.belongsTo(models.Student, { foreignKey: 'studentId' });
#+END_SRC

*** One to Many between Student and Class
> student.js
#+BEGIN_SRC js
 Student.belongsTo(models.Class, { foreignKey: 'classId' });
#+END_SRC
> class.js
#+BEGIN_SRC js
Class.hasMany(models.Student, { foreignKey: 'classId' });
#+END_SRC

*** Many to Many between Student and Lesson through StudentLessons table
> student.js
#+BEGIN_SRC js
const columnMapping = { 
    through: 'StudentLesson', // This is the model name referencing the join table. 
    otherKey: 'lessonId', 
    foreignKey: 'studentId' 
} 
 
Student.belongsToMany(models.Lesson, columnMapping);
#+END_SRC
> lesson.js
#+BEGIN_SRC js
const columnMapping = { 
    through: 'StudentLesson', // This is the model name referencing the join table. 
    otherKey: 'studentId', 
    foreignKey: 'lessonId' 
} 
 
Lesson.belongsToMany(models.Student, columnMapping);
#+END_SRC
*** Inserting a new item
#+BEGIN_SRC js
// Way 1 - With build and save
const pet = Pet.build({ 
    name: "Fido", 
    petTypeId: 1 
}); 
 
await pet.save(); 
 
// Way 2 - With create 
const pet = await Pet.create({ 
    name: "Fido", 
    petTypeId: 1 
}); 

#+END_SRC

*** Updating an item
#+BEGIN_SRC js
// Find the pet with id = 1
const pet = await Pet.findByPk(1); 
 
// Way 1 
pet.name = "Fido, Sr."
await pet.save; 
 
// Way 2
await pet.update({ 
    name: "Fido, Sr." 
});
#+END_SRC

*** Deleting a single item
#+BEGIN_SRC js
// Find the pet with id = 1
const pet = await Pet.findByPk(1); 
 
// Notice this is an instance method 
pet.destroy(); 
#+END_SRC

*** Deleting multiple items
#+BEGIN_SRC js
// Notice this is a static class method
await Pet.destroy({ 
    where: { 
        petTypeId: 1 // Destorys all the pets where the petType is 1 
    } 
})
#+END_SRC

*** Query Format
**** findOne
#+BEGIN_SRC js
await <Model>.findOne({ 
    where: { 
        <column>: { 
            [Op.<operator>]: <value> 
        } 
    }, 
});
#+END_SRC
**** findAll
#+BEGIN_SRC js
await <Model>.findAll({ 
    where: { 
        <column>: { 
            [Op.<operator>]: <value> 
        } 
    }, 
    include: <include_specifier>, 
    offset: 10, 
    limit: 2 
});
#+END_SRC

**** findByPk
#+BEGIN_SRC js
await <Model>.findByPk(<primary_key>, { 
    include: <include_specifier> 
});
#+END_SRC

*** Eager loading associations with include
Simple include of one related model
#+BEGIN_SRC js
  await Pet.findByPk(1,  { 
          include: PetType 
      })
#+END_SRC
Include can take an array of models if you need to include more than one.
#+BEGIN_SRC js
await Pet.findByPk(1, { 
        include: [Pet, Owner] 
    })
#+END_SRC
Include can also take an object with keys model and include. This is in case you have nested associations.
In this case Owner doesn't have an association with PetType, but Pet does, so we want to include PetType
onto the Pet Model.
#+BEGIN_SRC js
await Owner.findByPk(1, { 
        include: { 
            model: Pet 
            include: PetType 
        } 
    });
#+END_SRC

*** toJSON method
The confusingly named toJSON() method does not return a JSON string but instead returns a POJO for the instance.
#+BEGIN_SRC js
// pet is an instance of the Pet class
const pet = await Pet.findByPk(1); 
console.log(pet) // prints a giant object with 
                 // tons of properties and methods 
 
// petPOJO is now just a plain old Javascript Object
const petPOJO = pet.toJSON(); 
 
console.log(petPOJO); // { name: "Fido", petTypeId: 1 }
#+END_SRC
Common Where Operators
#+BEGIN_SRC js
  const Op = Sequelize.Op 

  [Op.and]: [{a: 5}, {b: 6}] // (a = 5) AND (b = 6) 
  [Op.or]: [{a: 5}, {a: 6}]  // (a = 5 OR a = 6) 
  [Op.gt]: 6,                // > 6 
  [Op.gte]: 6,               // >= 6 
  [Op.lt]: 10,               // < 10 
  [Op.lte]: 10,              // <= 10 
  [Op.ne]: 20,               // != 20 
  [Op.eq]: 3,                // = 3 
  [Op.is]: null              // IS NULL 
  [Op.not]: true,            // IS NOT TRUE 
  [Op.between]: [6, 10],     // BETWEEN 6 AND 10 
  [Op.notBetween]: [11, 15], // NOT BETWEEN 11 AND 15 
  [Op.in]: [1, 2],           // IN [1, 2] 
  [Op.notIn]: [1, 2],        // NOT IN [1, 2] 
  [Op.like]: '%hat',         // LIKE '%hat' 
  [Op.notLike]: '%hat'       // NOT LIKE '%hat' 
  [Op.iLike]: '%hat'         // ILIKE '%hat' (case insensitive) (PG only) 
  [Op.notILike]: '%hat'      // NOT ILIKE '%hat'  (PG only) 
  [Op.startsWith]: 'hat'     // LIKE 'hat%' 
  [Op.endsWith]: 'hat'       // LIKE '%hat' 
  [Op.substring]: 'hat'      // LIKE '%hat%' 
  [Op.regexp]: '^[h|a|t]'    // REGEXP/~ '^[h|a|t]' (MySQL/PG only) 
  [Op.notRegexp]: '^[h|a|t]' // NOT REGEXP/!~ '^[h|a|t]' (MySQL/PG only) 
  [Op.iRegexp]: '^[h|a|t]'    // ~* '^[h|a|t]' (PG only) 
  [Op.notIRegexp]: '^[h|a|t]' // !~* '^[h|a|t]' (PG only) 
  [Op.like]: { [Op.any]: ['cat', 'hat']} 
#+END_SRC
